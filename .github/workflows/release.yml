name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.version_check.outputs.should_release }}
      version: ${{ steps.version_check.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare repository
        run: git fetch --tags --force

      - id: version_check
        name: Evaluate release conditions
        shell: bash
        run: |
          set -euo pipefail
          CURRENT_VERSION=$(python3 - <<'PY'
          import re
          from pathlib import Path

          content = Path("Cargo.toml").read_text()
          match_section = re.search(r'^\[package\](.*?)(?:\n\[|\Z)', content, re.M | re.S)
          if not match_section:
              raise SystemExit("Failed to locate [package] section in Cargo.toml")
          match_version = re.search(r'^version\s*=\s*"(.*?)"', match_section.group(1), re.M)
          if not match_version:
              raise SystemExit("Failed to locate package version in Cargo.toml")
          print(match_version.group(1))
          PY
          )
          echo "version=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"

          TAG_NAME="v${CURRENT_VERSION}"
          if git rev-parse "refs/tags/${TAG_NAME}" >/dev/null 2>&1; then
            echo "Tag ${TAG_NAME} already exists. Skipping release."
            echo "should_release=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ "${GITHUB_EVENT_NAME}" = "push" ]; then
            BEFORE_SHA="${GITHUB_EVENT_BEFORE:-}"
            NULL_SHA="0000000000000000000000000000000000000000"
            if [ -n "${BEFORE_SHA}" ] && [ "${BEFORE_SHA}" != "${NULL_SHA}" ]; then
              if ! git cat-file -e "${BEFORE_SHA}^{commit}" 2>/dev/null; then
                echo "Unable to find base commit ${BEFORE_SHA}; proceeding with release."
              elif ! git diff --name-only "${BEFORE_SHA}" HEAD | grep -q '^Cargo.toml$'; then
                echo "Cargo.toml was not modified in this push. Skipping release."
                echo "should_release=false" >> "$GITHUB_OUTPUT"
                exit 0
              fi
            fi
          fi

          echo "should_release=true" >> "$GITHUB_OUTPUT"

  build:
    name: Build (${{ matrix.target }})
    needs: determine-version
    if: needs.determine-version.outputs.should_release == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
            binary_name: geyserbench
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz
            binary_name: geyserbench
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
            binary_name: geyserbench.exe
    env:
      CARGO_TERM_COLOR: always
      VERSION: ${{ needs.determine-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --locked

      - name: Package artifact (Unix)
        if: matrix.archive == 'tar.gz'
        shell: bash
        run: |
          set -euo pipefail
          ARTIFACT="geyserbench-${VERSION}-${{ matrix.target }}.tar.gz"
          tar -C target/release -czf "$ARTIFACT" "${{ matrix.binary_name }}"
          printf 'ARTIFACT_PATH=%s\n' "$ARTIFACT" >> "$GITHUB_ENV"

      - name: Package artifact (Windows)
        if: matrix.archive == 'zip'
        shell: pwsh
        run: |
          $artifact = "geyserbench-$env:VERSION-${{ matrix.target }}.zip"
          Compress-Archive -Path "target/release/${{ matrix.binary_name }}" -DestinationPath $artifact
          Add-Content -Path $env:GITHUB_ENV -Value "ARTIFACT_PATH=$artifact"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.target }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error

  release:
    name: Publish Release
    needs:
      - determine-version
      - build
    if: needs.determine-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.determine-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Flatten artifacts
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p release
          shopt -s nullglob
          for dir in dist/*; do
            if [ -d "$dir" ]; then
              for file in "$dir"/*; do
                mv "$file" release/
              done
            fi
          done

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Create tag
        shell: bash
        run: |
          set -euo pipefail
          git config user.email "github-actions@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          TAG_NAME="v${VERSION}"
          if ! git rev-parse "${TAG_NAME}" >/dev/null 2>&1; then
            git tag "${TAG_NAME}"
          fi
          if git ls-remote --exit-code --tags origin "${TAG_NAME}" >/dev/null 2>&1; then
            echo "Tag ${TAG_NAME} already exists on origin."
          else
            git push origin "${TAG_NAME}"
          fi

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: GeyserBench v${{ env.VERSION }}
          generate_release_notes: true
          files: release/*
